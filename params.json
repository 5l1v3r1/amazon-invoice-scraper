{"name":"Amazon Invoice Generator","tagline":"A repository for maintaining amazon orders and invoices automatically","body":"<center><h1>Amazon Invoice Automation (Private Repository)</h1></center>\r\n<hr>\r\n\r\n## Log into Amazon\r\n\r\nLog into Amazon using the following base snippet. Store data in session which you can use for future queries. Check response content to determine if its a successful login.\r\n\r\n``` Python\r\n#!/usr/bin/env python3\r\nimport requests\r\n\r\nsession = requests.Session()\r\ndata = {'email':'email_id@gmail.com', 'password':'password'}\r\nheader={'User-Agent' : 'Mozilla/5.0'}\r\n\r\nresponse = session.post('https://www.amazon.com/gp/sign-in.html', data, headers=header)\r\nreturn response.content\r\n```\r\n\r\n## Scrape Order Details Page for Order Numbers\r\n\r\n### Go to page\r\nAfter successful login, go to order details page\r\n`https://www.amazon.com/gp/css/order-history`.\r\n\r\n> By default it will load order details for last 6 months which is sufficient for monthly automated invoice preparation. If required more, you can change some query parameters easily to suit your needs.\r\n\r\n### Count number of orders\r\n\r\n### Scrape Invoice links\r\nNext find out all anchor tags with `Invoice` text inside them as well as a link that points to `https://www.amazon.com/gp/css/summary/print.html/ref=oh_aui_pi_o00_?orderID=123-1234567-1234567`, where order number is given by `123-1234567-1234567`. In the link, base url (`//www.amazon.com`) might be omitted; so look for `/gp/css/summary/print.html/ref=oh_aui_pi_o00_`.\r\n\r\nOne sample link looks like: `<a class=\"a-link-normal\" href=\"/gp/css/summary/print.html/ref=oh_aui_pi_o00_?ie=UTF8&amp;orderID=123-1234567-1234567\">Invoice</a>`\r\n\r\n### Look into multiple pages\r\nNumber of orders might be more than 10 and hence we need to deal with pagination issues.\r\n\r\nThis is the url when I click page 2: `https://www.amazon.com/gp/your-account/order-history/ref=oh_aui_pagination_1_2?ie=UTF8&orderFilter=months-6&search=&startIndex=10`\r\n\r\nThis is the url for page 3: `https://www.amazon.com/gp/your-account/order-history/ref=oh_aui_pagination_2_3?ie=UTF8&orderFilter=months-6&search=&startIndex=20`\r\n\r\nExplicit click to page 1: `https://www.amazon.com/gp/your-account/order-history/ref=oh_aui_pagination_3_1?ie=UTF8&orderFilter=months-6&search=&startIndex=0`\r\n\r\nClicking on `next` from page 1 to 2: `https://www.amazon.com/gp/your-account/order-history/ref=oh_aui_pagination_1_2?ie=UTF8&orderFilter=months-6&search=&startIndex=10`\r\n\r\nClicking on `next` from page 2 to 3: `https://www.amazon.com/gp/your-account/order-history/ref=oh_aui_pagination_2_3?ie=UTF8&orderFilter=months-6&search=&startIndex=20`\r\n\r\nClicking on `previous` from page 3 to 2: `https://www.amazon.com/gp/your-account/order-history/ref=oh_aui_pagination_3_2?ie=UTF8&orderFilter=months-6&search=&startIndex=10`\r\n\r\nClicking on `previous` from page 2 to 1: `https://www.amazon.com/gp/your-account/order-history/ref=oh_aui_pagination_2_1?ie=UTF8&orderFilter=months-6&search=&startIndex=0`\r\n\r\nScrape invoices (order numbers and corresponding links) till you hit the total invoice number found on first `order history` page all while discarding duplicate entries.\r\n\r\n## Go to order invoice page\r\nNext, using the already stored `requests.Session` go to the invoice urls one by one. Sample url: `https://www.amazon.com/gp/css/summary/print.html/ref=oh_aui_pi_o00_?orderID=123-1234567-1234567`\r\n\r\n```python\r\ninvoice_url = 'https://www.amazon.com/gp/css/summary/print.html/ref=oh_aui_pi_o00_?orderID=123-1234567-1234567'\r\nresponse = session.post(invoice_url, data, headers=header)\r\n\r\nreturn response.content\r\n```\r\n\r\n## Print the Invoices\r\n\r\nYou already have the response content or, the html content returned by amazon for that particular order number. Simply use that with the help of `pdfkit` to save file as a pdf with possibly the order number as part of filename.\r\n\r\n``` python\r\nimport pdfkit\r\n\r\norder_id = '123-1234567-1234567'\r\npdf_file = 'invoice_' + str(order_id) + '.pdf'\r\nhtml_content = response.content\r\n\r\n# pdfkit.from_url('http://amazon.com/...', pdf_file)\r\n# pdfkit.from_file('test.html', pdf_file)\r\npdfkit.from_string(html_content, pdf_file)\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}